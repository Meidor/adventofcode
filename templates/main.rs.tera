#![feature(test)]
#![allow(dead_code)]
#![allow(unused_variables)]

extern crate test;
extern crate adventofcode;

use std::{path::Path, collections::HashMap, env};
use adventofcode::solutions::{self, *};

{% for day in days %}
fn day{{ day }}(){
    println!("DAY {{ day }}");
    println!("====================================");
    let path = Path::new("./inputs/day{{ day }}.txt");
    let lines = solutions::read_lines(path).unwrap();
    println!("Part one: {:?}", day{{ day }}::part_one(&lines));
    println!("Part two: {:?}", day{{ day }}::part_two(&lines));
}
{% endfor %}

fn get_days() -> HashMap<String, fn()> {
    let mut days: HashMap<String, fn()> = HashMap::new();
    {% for day in days %}days.insert("day{{ day }}".to_string(), day{{ day }});
    {% endfor %}
    days
}

fn main() {
    println!();
    println!("AOC 2021");
    println!();
    
    let days = get_days();
    let mut keys: Vec<&String> = days.keys().collect();
    keys.sort_unstable();

    let args: Vec<String> = env::args().skip(1).collect();
    if args.len() > 0 {
        let day = &args[0];
        if day == "all" {
            for day in keys {
                days.get(day).unwrap()();
                println!();
            }
            return;
        }
        
        match days.get(day) {
            Some(day) => day(),
            _ => println!("{} is not implemented yet!", &args[0])
        }
        return;
    }
    days.get(*keys.last().unwrap()).unwrap()();
}
