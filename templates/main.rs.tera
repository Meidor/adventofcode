#![feature(test)]
extern crate adventofcode;
extern crate test;

use adventofcode::{helpers, solutions::*};
use std::{collections::HashMap, env, path::Path};
{% for day in days %}
fn {{ day }}() {
    println!("{{ day | upper }}");
    println!("====================================");
    let path = Path::new("./inputs/{{ day }}.txt");
    let lines = helpers::read_lines(path).unwrap();
    println!("Part one: {:?}", {{ day }}::part_one(&lines));
    println!("Part two: {:?}", {{ day }}::part_two(&lines));
}
{% endfor %}

fn get_days() -> HashMap<String, fn()> {
    let mut days: HashMap<String, fn()> = HashMap::new();
    {% for day in days %}days.insert("{{ day }}".to_string(), {{ day }});
    {% endfor %}
    days
}

fn main() {
    println!();
    println!("AOC 2021");
    println!();

    let days = get_days();
    let mut keys: Vec<&String> = days.keys().collect();
    keys.sort_unstable();

    let args: Vec<String> = env::args().skip(1).collect();
    if !args.is_empty() {
        let day = &args[0];
        if day == "all" {
            for day in keys {
                days.get(day).unwrap()();
                println!();
            }
            return;
        }

        match days.get(day) {
            Some(day) => day(),
            _ => println!("{} is not implemented yet!", &args[0]),
        }
        return;
    }
    days.get(*keys.last().unwrap()).unwrap()();
}
